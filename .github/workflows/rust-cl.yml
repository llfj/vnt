name: Rust-mipsel-test

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  #  test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Init submodules
  #        uses: snickerbockers/submodules-init@v4
  #      - name: Cargo cache
  #        uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ./target
  #          key: test-cargo-registry
  #      - name: List
  #        run: find ./
  #      - name: Run tests
  #        run: cargo test --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
    #       - TARGET: mips-unknown-linux-gnu
    #        OS: ubuntu-latest
    #        FEATURES: normal
    #       - TARGET: mips-unknown-linux-musl
    #         OS: ubuntu-latest
    #         FEATURES: normal
    #        - TARGET: mips64-unknown-linux-muslabi64
    #         OS: ubuntu-latest
    #         FEATURES: normal
    #       - TARGET: mips64el-unknown-linux-muslabi64
    #         OS: ubuntu-latest
    #         FEATURES: normal
    #       - TARGET: mipsel-unknown-linux-gnu
    #         OS: ubuntu-latest
    #         FEATURES: normal
          - TARGET: mipsel-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: normal
    # needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - uses: actions/checkout@v2
      - name: Init submodules
        uses: snickerbockers/submodules-init@v4
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update && sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-mips crossbuild-essential-mipsel crossbuild-essential-armhf musl-tools 
          fi
          echo --------
          mipsel-linux-gnu-gcc --version
          # some additional configuration for cross-compilation on linux
           cat >>~/.cargo/config <<EOF
          [target.mipsel-unknown-linux-musl]
          linker = "mipsel-linux-gnu-gcc"
          rustflags = "-C", "link-arg=-static -nostartfiles"
          # [target.mips-unknown-linux-gnu]
          # linker = "mips-linux-gnu-gcc"
          # [target.mipsel-unknown-linux-musl]
          # linker = "mipsel-linux-gnu-gcc"
          # [target.mipsel-unknown-linux-gnu]
          # linker = "mipsel-linux-gnu-gcc"
          # [target.aarch64-unknown-linux-gnu]
          # linker = "aarch64-linux-gnu-gcc"
          # [target.aarch64-unknown-linux-musl]
          # linker = "aarch64-linux-gnu-gcc"
          # [target.armv7-unknown-linux-gnueabihf]
          # linker = "arm-linux-gnueabihf-gcc"
          # [target.armv7-unknown-linux-musleabihf]
          # linker = "arm-linux-gnueabihf-gcc"
          # [target.arm-unknown-linux-gnueabihf]
          # linker = "arm-linux-gnueabihf-gcc"
          # [target.arm-unknown-linux-musleabihf]
          # linker = "arm-linux-gnueabihf-gcc"
          # EOF
      - name: Install rust target
       # rustup toolchain install stable-$TARGET
        run: |
          rustup target add $TARGET
       #- name: test
        # run: |
         #  rustc --print target-list | grep musl
          # echo -----------------
          # rustup target list
          # echo -----------------
          # rustup show
      - name: Run build
        # run: cargo rustc -- -C link-args="-static -nostartfiles" --package vnt-cli --release --verbose --target $TARGET --features $FEATURES
        run: cargo build --package vnt-cli --release --verbose --target $TARGET --features $FEATURES
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./artifacts/$EXEC
          tar -czf ./artifacts/$NAME-$TARGET-$TAG.tar.gz -C ./artifacts $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: vnt-cli
          path: |
            ./artifacts
  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vnt-cli
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifacts/*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
